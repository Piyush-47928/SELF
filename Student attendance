import cv2
import numpy as np
import os
import shutil
import datetime
from openpyxl import Workbook, load_workbook

# Haar Cascade for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Reset memory (optional)
def reset_memory():
    if os.path.exists("dataset"):
        shutil.rmtree("dataset")
    if os.path.exists("trainer.yml"):
        os.remove("trainer.yml")
    if os.path.exists("labels.txt"):
        os.remove("labels.txt")
    print("Previous memory cleared.")

# Capture images for each student
def capture_images(user_id, name, dob):
    cam = cv2.VideoCapture(0)
    count = 0
    while True:
        ret, frame = cam.read()
        if not ret:
            break
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
            count += 1
            cv2.imwrite(f"dataset/User.{user_id}.{count}.jpg", gray[y:y+h, x:x+w])
        cv2.imshow('Capturing Images', frame)
        if cv2.waitKey(1) & 0xFF == ord('q') or count >= 30:
            break
    cam.release()
    cv2.destroyAllWindows()
    # Save student info in labels.txt
    with open("labels.txt", "a") as f:
        f.write(f"{user_id},{name},{dob}\n")

# Train recognizer
def train_model():
    from PIL import Image
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    faces, ids = [], []
    imagePaths = [os.path.join("dataset", f) for f in os.listdir("dataset")]
    for imagePath in imagePaths:
        img = Image.open(imagePath).convert('L')
        image_np = np.array(img, 'uint8')
        id_ = int(os.path.split(imagePath)[-1].split(".")[1])
        faces.append(image_np)
        ids.append(id_)
    recognizer.train(faces, np.array(ids))
    recognizer.save("trainer.yml")
    print("Training complete!")

# Excel setup
def setup_excel():
    today = datetime.date.today().strftime("%Y-%m-%d")
    file_name = "attendance.xlsx"
    if os.path.exists(file_name):
        wb = load_workbook(file_name)
    else:
        wb = Workbook()
    if today not in wb.sheetnames:
        ws = wb.create_sheet(title=today)
        ws.append(["Student Name", "DOB", "Present/Absent"])
        wb.save(file_name)
    return file_name, today

# Mark attendance in Excel
def mark_attendance(name, dob, status):
    file_name, today = setup_excel()
    wb = load_workbook(file_name)
    ws = wb[today]
    ws.append([name, dob, status])
    wb.save(file_name)
    print(f"Attendance marked for {name} ({status}).")

# Recognize faces and mark attendance
def recognize_faces(total_students):
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    recognizer.read("trainer.yml")
    labels = {}
    with open("labels.txt", "r") as f:
        for line in f:
            label, name, dob = line.strip().split(",")
            labels[int(label)] = (name, dob)

    cam = cv2.VideoCapture(0)
    recognized_count = 0
    while True:
        ret, frame = cam.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        for (x, y, w, h) in faces:
            id_, confidence = recognizer.predict(gray[y:y+h, x:x+w])
            if confidence < 75:  # 75% accuracy threshold
                name, dob = labels[id_]
                status = "Present"
                recognized_count += 1
                cv2.putText(frame, f"{name} - Marked Present", (x, y-10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
                mark_attendance(name, dob, status)
            else:
                cv2.putText(frame, "Unknown", (x, y-10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
        cv2.imshow("Recognizing Faces", frame)
        if recognized_count >= total_students:
            print("All students recognized. Attendance completed.")
            break
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    cam.release()
    cv2.destroyAllWindows()

# Main program
def main():
    # Reset memory if needed
    choice = input("Do you want to reset memory? (y/n): ")
    if choice.lower() == 'y':
        reset_memory()

    if not os.path.exists("dataset"):
        os.makedirs("dataset")

    num_students = int(input("Enter number of students for recognition: "))

    for user_id in range(1, num_students+1):
        name = input(f"Enter name for Student {user_id}: ")
        dob = input(f"Enter DOB (dd-mm-yyyy) for {name}: ")
        print(f"Capturing images for {name}...")
        capture_images(user_id, name, dob)

    train_model()
    recognize_faces(num_students)

if __name__ == "__main__":
    main()

'''
import os
import shutil

def reset_memory():
    # Delete dataset folder
    if os.path.exists("dataset"):
        shutil.rmtree("dataset")
        print("Dataset folder deleted.")

    # Delete trainer.yml
    if os.path.exists("trainer.yml"):
        os.remove("trainer.yml")
        print("Trainer file deleted.")

    # Delete labels.txt
    if os.path.exists("labels.txt"):
        os.remove("labels.txt")
        print("Labels file deleted.")
'''
